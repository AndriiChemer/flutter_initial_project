// Mocks generated by Mockito 5.4.4 from annotations
// in iteo_libraries_example/test/presentation/page/main_page_golden_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:flutter_bloc/flutter_bloc.dart' as _i10;
import 'package:iteo_libraries_example/domain/cars/model/car.dart' as _i9;
import 'package:iteo_libraries_example/domain/cars/use_case/get_cars_from_isolate_executor_use_case.dart'
    as _i4;
import 'package:iteo_libraries_example/domain/cars/use_case/get_cars_use_case.dart'
    as _i2;
import 'package:iteo_libraries_example/domain/cars/use_case/load_cars_from_isolate_executor_use_case.dart'
    as _i5;
import 'package:iteo_libraries_example/domain/cars/use_case/save_cars_to_database_use_case.dart'
    as _i3;
import 'package:iteo_libraries_example/presentation/page/cars/cubit/cars_cubit.dart'
    as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetCarsUseCase_0 extends _i1.SmartFake
    implements _i2.GetCarsUseCase {
  _FakeGetCarsUseCase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSaveCarsToDatabaseUseCase_1 extends _i1.SmartFake
    implements _i3.SaveCarsToDatabaseUseCase {
  _FakeSaveCarsToDatabaseUseCase_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetCarsFromIsolateExecutorUseCase_2 extends _i1.SmartFake
    implements _i4.GetCarsFromIsolateExecutorUseCase {
  _FakeGetCarsFromIsolateExecutorUseCase_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLoadCarsFromIsolateExecutorUseCase_3 extends _i1.SmartFake
    implements _i5.LoadCarsFromIsolateExecutorUseCase {
  _FakeLoadCarsFromIsolateExecutorUseCase_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamController_4<T> extends _i1.SmartFake
    implements _i6.StreamController<T> {
  _FakeStreamController_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CarsCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockCarsCubit extends _i1.Mock implements _i7.CarsCubit {
  @override
  _i2.GetCarsUseCase get getCarsUseCase => (super.noSuchMethod(
        Invocation.getter(#getCarsUseCase),
        returnValue: _FakeGetCarsUseCase_0(
          this,
          Invocation.getter(#getCarsUseCase),
        ),
        returnValueForMissingStub: _FakeGetCarsUseCase_0(
          this,
          Invocation.getter(#getCarsUseCase),
        ),
      ) as _i2.GetCarsUseCase);

  @override
  _i3.SaveCarsToDatabaseUseCase get saveCarsToDatabaseUseCase =>
      (super.noSuchMethod(
        Invocation.getter(#saveCarsToDatabaseUseCase),
        returnValue: _FakeSaveCarsToDatabaseUseCase_1(
          this,
          Invocation.getter(#saveCarsToDatabaseUseCase),
        ),
        returnValueForMissingStub: _FakeSaveCarsToDatabaseUseCase_1(
          this,
          Invocation.getter(#saveCarsToDatabaseUseCase),
        ),
      ) as _i3.SaveCarsToDatabaseUseCase);

  @override
  _i4.GetCarsFromIsolateExecutorUseCase get getCarsFromIsolateExecutorUseCase =>
      (super.noSuchMethod(
        Invocation.getter(#getCarsFromIsolateExecutorUseCase),
        returnValue: _FakeGetCarsFromIsolateExecutorUseCase_2(
          this,
          Invocation.getter(#getCarsFromIsolateExecutorUseCase),
        ),
        returnValueForMissingStub: _FakeGetCarsFromIsolateExecutorUseCase_2(
          this,
          Invocation.getter(#getCarsFromIsolateExecutorUseCase),
        ),
      ) as _i4.GetCarsFromIsolateExecutorUseCase);

  @override
  _i5.LoadCarsFromIsolateExecutorUseCase
      get loadCarsFromIsolateExecutorUseCase => (super.noSuchMethod(
            Invocation.getter(#loadCarsFromIsolateExecutorUseCase),
            returnValue: _FakeLoadCarsFromIsolateExecutorUseCase_3(
              this,
              Invocation.getter(#loadCarsFromIsolateExecutorUseCase),
            ),
            returnValueForMissingStub:
                _FakeLoadCarsFromIsolateExecutorUseCase_3(
              this,
              Invocation.getter(#loadCarsFromIsolateExecutorUseCase),
            ),
          ) as _i5.LoadCarsFromIsolateExecutorUseCase);

  @override
  _i7.CarsState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i8.dummyValue<_i7.CarsState>(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _i8.dummyValue<_i7.CarsState>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i7.CarsState);

  @override
  _i6.Stream<_i7.CarsState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i6.Stream<_i7.CarsState>.empty(),
        returnValueForMissingStub: _i6.Stream<_i7.CarsState>.empty(),
      ) as _i6.Stream<_i7.CarsState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set previousAction(_i7.CarsAction? _previousAction) => super.noSuchMethod(
        Invocation.setter(
          #previousAction,
          _previousAction,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Stream<_i7.CarsAction> get actions => (super.noSuchMethod(
        Invocation.getter(#actions),
        returnValue: _i6.Stream<_i7.CarsAction>.empty(),
        returnValueForMissingStub: _i6.Stream<_i7.CarsAction>.empty(),
      ) as _i6.Stream<_i7.CarsAction>);

  @override
  _i6.StreamController<_i7.CarsAction> get actionStreamController =>
      (super.noSuchMethod(
        Invocation.getter(#actionStreamController),
        returnValue: _FakeStreamController_4<_i7.CarsAction>(
          this,
          Invocation.getter(#actionStreamController),
        ),
        returnValueForMissingStub: _FakeStreamController_4<_i7.CarsAction>(
          this,
          Invocation.getter(#actionStreamController),
        ),
      ) as _i6.StreamController<_i7.CarsAction>);

  @override
  _i6.Future<void> getCars() => (super.noSuchMethod(
        Invocation.method(
          #getCars,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> getCarsFromIsolateExecutor() => (super.noSuchMethod(
        Invocation.method(
          #getCarsFromIsolateExecutor,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void loadCardsFromIsolateExecutor() => super.noSuchMethod(
        Invocation.method(
          #loadCardsFromIsolateExecutor,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> saveToDatabase(List<_i9.Car>? cars) => (super.noSuchMethod(
        Invocation.method(
          #saveToDatabase,
          [cars],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void emit(_i7.CarsState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispatch(_i7.CarsAction? action) => super.noSuchMethod(
        Invocation.method(
          #dispatch,
          [action],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i10.Change<_i7.CarsState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}
